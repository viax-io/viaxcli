# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Rust.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"

# stages:
#   - build

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: https://docs.gitlab.com/ee/ci/services/index.html
# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
# before_script:
#   - apt-get update -yqq
#   - apt-get install -yqq --no-install-recommends build-essential

# Use cargo to test the project
#test:cargo:
#  script:
#    - rustc --version && cargo --version  # Print version info for debugging
#    - cargo test --workspace --verbose

# Optional: Use a third party library to generate gitlab junit reports
# test:junit-report:
#   script:
#     Should be specified in Cargo.toml
#     - cargo install junitify
#     - cargo test -- --format=json -Z unstable-options --report-time | junitify --out $CI_PROJECT_DIR/tests/
#   artifacts:
#     when: always
#     reports:
#       junit: $CI_PROJECT_DIR/tests/*.xml

# build:amd64:
#     script:
#         - rustc --version && cargo --version  # Print version info for debugging
#         - rustup target list --installed
#         - cargo build --release
#     tags:
#         - common
#     artifacts:
#         paths:
#             - target/release/viax

build:arm64darwin:
    script:
        # - apt-get update && apt install -y python3-pip
        # - pip3 install ziglang --break-system-packages
        - rustc --version && cargo --version
        # - cargo install --locked cargo-zigbuild
        - rustup target add aarch64-apple-darwin
        - rustup target list --installed
        - tar -xf mac_sdk/MacOSX12.3.sdk.tar.xz --directory=mac_sdk &>/dev/null
        - wget -q https://ziglang.org/download/0.13.0/zig-linux-x86_64-0.13.0.tar.xz
        - tar xf zig-linux-x86_64-0.13.0.tar.xz
        - export PATH=$PATH:`pwd`/zig-linux-x86_64-0.13.0/
        - zig version
        - CC=`pwd`/zcc cargo build --target aarch64-apple-darwin --release
        # - export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER='aarch64-linux-gnu-gcc'
        # - cargo build --release --target aarch64-apple-darwin
        # - cargo zigbuild --target aarch64-apple-darwin
    tags:
        - common
    artifacts:
        paths:
            - target/aarch64-apple-darwin/release/viax

# build:win:
#     script:
#         - apt-get update && apt install -y gcc-mingw-w64-x86-64
#         - rustc --version && cargo --version  # Print version info for debugging
#         - rustup target add x86_64-pc-windows-gnu
#         - rustup toolchain install stable-x86_64-pc-windows-gnu
#         - rustup target list --installed
#         - cargo build --release --target x86_64-pc-windows-gnu 
#     tags:
#         - common
#     artifacts:
#         paths:
#             - target/x86_64-pc-windows-gnu/release/viax.exe

# deploy:
#   stage: deploy
#   script: echo "Define your deployment script!"
#   environment: production
